{"version":3,"sources":["logo.svg","util.js","AirQtyChart.js","Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["getColorCode","inputData","colorCode","AirQtyChart","props","aiqData","useState","aiq","setAiq","aiqValue","setAiqValue","colorsCode","setColorsCode","useEffect","console","log","Object","keys","_aiqVal","_colorCode","item","push","aqi","toFixed","JSON","stringify","series","data","options","chart","height","type","events","click","w","e","colors","plotOptions","bar","columnWidth","distributed","dataLabels","enabled","legend","show","yaxis","labels","style","xaxis","categories","fontSize","width","client","W3CWebSocket","MapObject","city","updatedAt","Date","now","Dashboard","airQtyRec","setAirQtyRec","onmessage","event","res","parse","length","className","map","index","color","background","moment","fromNow","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db806119.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\r\n   export const getColorCode = (inputData) => {\r\n        let colorCode = \"\";\r\n        if (inputData > 0 && inputData < 51) {//Good\r\n            colorCode = \"#55a84f\";\r\n        } else if (inputData >= 51 && inputData < 101) {//Satisfactory\r\n            colorCode = \"#a3c853\";\r\n        }\r\n        else if (inputData >= 101 && inputData < 201) { // moderate\r\n            colorCode = \"#fff833\";\r\n        }\r\n        else if (inputData >= 201 && inputData < 301) { //Poor\r\n            colorCode = \"#f29c33\";\r\n        }\r\n        else if (inputData >= 301 && inputData < 401) { //Very poor\r\n            colorCode = \"#e93f33\";\r\n        }\r\n        else if (inputData >= 401 && inputData < 500) { //severe\r\n            colorCode = \"#af2d24\";\r\n        }\r\n        return colorCode;\r\n    }\r\n\r\n","import Chart from \"react-apexcharts\";\r\nimport {useEffect,useState} from \"react\";\r\nimport {getColorCode} from \"./util\";\r\n\r\n\r\nconst AirQtyChart = (props)=>{\r\n    const {aiqData} = props;\r\n    const [aiq,setAiq] = useState([]);\r\n    const [aiqValue,setAiqValue] = useState([]);\r\n    const [colorsCode,setColorsCode] = useState([]);\r\n    useEffect(()=>{\r\n        console.log(aiqData);\r\n        setAiq(Object.keys(aiqData));\r\n        let _aiqVal = [];\r\n        let _colorCode = [];\r\n        for(let item in aiqData){\r\n            _aiqVal.push(aiqData[item].aqi.toFixed(2));\r\n            _colorCode.push(getColorCode(aiqData[item].aqi));\r\n        }\r\n        setAiqValue(_aiqVal);\r\n        setColorsCode(_colorCode);\r\n\r\n    },[JSON.stringify(aiqData)])\r\n\r\n    const series = [{\r\n        data: aiqValue\r\n      }];\r\n    const options = {\r\n        chart: {\r\n          height: 350,\r\n          type: 'bar',\r\n          events: {\r\n            click: function(chart, w, e) {\r\n              // console.log(chart, w, e)\r\n            }\r\n          }\r\n        },\r\n        colors:colorsCode,\r\n        plotOptions: {\r\n          bar: {\r\n            columnWidth: '45%',\r\n            distributed: true,\r\n          }\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        legend: {\r\n          show: false,         \r\n        },\r\n        yaxis:{\r\n            show:true,\r\n            labels:{\r\n                 style:{\r\n                colors:\"#fff\"\r\n             }\r\n            }\r\n        },\r\n        xaxis: {\r\n          categories:aiq,\r\n          labels: {\r\n            style: {\r\n              colors: \"#fff\",\r\n              fontSize: '12px'\r\n            }\r\n          }\r\n        }\r\n      }\r\n    \r\n\r\n    return (<>\r\n        <Chart options={options} series={series} type=\"bar\" width=\"500\"  />\r\n    </>)\r\n}\r\n\r\nexport default AirQtyChart;","import { useEffect, useState } from \"react\";\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport moment from \"moment\";\r\nimport AirQtyChart from \"./AirQtyChart\";\r\nimport { getColorCode } from \"./util\";\r\nconst client = new W3CWebSocket('wss://city-ws.herokuapp.com/');\r\n\r\n//initializing value with one city Goa as hard code so that we can see the difference of last updateby field as all \r\n//data are getting update after 4-5 seconds from backend as result last updated column was showing a second ago for all values\r\nlet MapObject = { \"Goa\": { city: \"Goa\", aqi: 238.31, updatedAt: Date.now() } };\r\nconst Dashboard = () => {\r\n\r\n    const [airQtyRec, setAirQtyRec] = useState(null);\r\n\r\n    useEffect(() => {\r\n        client.onmessage = function (event) {\r\n            const res = JSON.parse(event.data);\r\n            for (let item of res) {\r\n                if (MapObject[item.city] && MapObject[item.city].aqi !== item.aqi) {\r\n                    MapObject[item.city].aqi = item.aqi;\r\n                    MapObject[item.city].updatedAt = Date.now();\r\n                } else if (!MapObject[item.city]) {\r\n                    MapObject[item.city] = item;\r\n                    MapObject[item.city].updatedAt = Date.now();\r\n                }\r\n                else {\r\n                    MapObject[item.city].aqi = item.aqi;\r\n                }\r\n            }\r\n            setAirQtyRec(event.data.length);\r\n\r\n        };\r\n\r\n    }, [airQtyRec])\r\n\r\n\r\n\r\n\r\n    return (<>\r\n\r\n\r\n        <div className=\"container\">\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>City</th>\r\n                        <th>Current AQI</th>\r\n                        <th>Last Updated</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        Object.keys(MapObject).map((data, index) => {\r\n                            return (<tr key={data + index}><td>{MapObject[data].city}</td><td style={{ color: \"#000\", background: getColorCode(MapObject[data].aqi.toFixed(2)) }}>{MapObject[data].aqi.toFixed(2)}</td><td>{moment(MapObject[data].updatedAt).fromNow()}</td></tr>)\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <AirQtyChart aiqData={MapObject} />\r\n        </div>\r\n    </>)\r\n}\r\n\r\nexport default Dashboard;","import logo from './logo.svg';\r\nimport './App.css';\r\nimport Dashboard from \"./Dashboard\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h2> Air Quality Index </h2>\r\n        <Dashboard />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}